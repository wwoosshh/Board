// src/components/BoardForm.js (Ìñ•ÏÉÅÎêú ÎØ∏ÎîîÏñ¥ Ï≤®Î∂Ä Í∏∞Îä• Ï∂îÍ∞Ä)
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { fetchPost, fetchCategories } from '../api/BoardApi';
import { createPostWithFiles, updatePostWithFiles } from '../api/FileApi';
import { uploadFile } from '../api/FileApi'; // Îã®Ïùº ÌååÏùº ÏóÖÎ°úÎìú Ìï®Ïàò Ï∂îÍ∞Ä
import { getCurrentUser } from '../api/AuthApi';
import MarkdownRenderer from './MarkdownRenderer';
import FileUploader from './FileUploader';
import styled from 'styled-components';

// ÏÉâÏÉÅ ÌåîÎ†àÌä∏
const colors = {
  primary: '#4263eb',
  primaryDark: '#364fc7',
  secondary: '#495057',
  accent: '#f59f00',
  success: '#51cf66',
  danger: '#ff6b6b',
  warning: '#ffd43b',
  light: '#f8f9fa',
  dark: '#212529',
  border: '#e9ecef',
  shadow: 'rgba(0, 0, 0, 0.1)',
  gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  cardBg: '#ffffff'
};

const FormContainer = styled.div`
  max-width: 900px;
  margin: 0 auto;
  padding: 30px 20px;
  background: ${colors.light};
  min-height: calc(100vh - 70px);
`;

const FormCard = styled.div`
  background: ${colors.cardBg};
  border-radius: 20px;
  box-shadow: 0 10px 40px ${colors.shadow};
  border: 1px solid ${colors.border};
  overflow: hidden;
  position: relative;
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 6px;
    background: ${colors.gradient};
  }
`;

const FormHeader = styled.div`
  padding: 30px 40px;
  background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
  border-bottom: 1px solid ${colors.border};
`;

const HeaderContent = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 20px;
  flex-wrap: wrap;
`;

const TitleSection = styled.div`
  flex: 1;
  min-width: 200px;
`;

const PageTitle = styled.h1`
  font-size: 32px;
  color: ${colors.dark};
  margin: 0 0 8px 0;
  font-weight: 700;
  letter-spacing: -0.5px;
  display: flex;
  align-items: center;
  gap: 12px;
  
  &:before {
    content: '${props => props.$isEdit ? '‚úèÔ∏è' : '‚úçÔ∏è'}';
    font-size: 28px;
  }
`;

const PageSubtitle = styled.p`
  color: ${colors.secondary};
  font-size: 16px;
  margin: 0;
  line-height: 1.5;
`;

const AuthorCard = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  background: linear-gradient(135deg, rgba(66, 99, 235, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
  padding: 16px 20px;
  border-radius: 12px;
  border: 1px solid rgba(66, 99, 235, 0.1);
  min-width: 250px;
`;

const AuthorAvatar = styled.div`
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: ${colors.gradient};
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  font-weight: 600;
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
`;

const AuthorInfo = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const AuthorName = styled.div`
  font-weight: 600;
  color: ${colors.dark};
  font-size: 16px;
`;

const AuthorRole = styled.div`
  font-size: 12px;
  color: white;
  background: ${props => {
    switch (props.$role) {
      case 'ROLE_MANAGER': return colors.danger;
      case 'ROLE_ADMIN': return colors.warning;
      case 'ROLE_MODERATOR': return colors.success;
      default: return colors.primary;
    }
  }};
  padding: 2px 8px;
  border-radius: 8px;
  display: inline-block;
  font-weight: 600;
`;

const Form = styled.form`
  padding: 40px;
`;

const FormSection = styled.div`
  margin-bottom: 32px;
`;

const SectionTitle = styled.h3`
  color: ${colors.dark};
  font-size: 18px;
  font-weight: 600;
  margin: 0 0 16px 0;
  display: flex;
  align-items: center;
  gap: 8px;
  
  &:before {
    content: '${props => props.$icon}';
    font-size: 16px;
  }
`;

const FormRow = styled.div`
  display: grid;
  grid-template-columns: ${props => props.$columns || '1fr'};
  gap: 20px;
  margin-bottom: 24px;
`;

const FormGroup = styled.div`
  position: relative;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 600;
  color: ${colors.dark};
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 6px;
`;

const Required = styled.span`
  color: ${colors.danger};
  font-size: 16px;
`;

const Input = styled.input`
  width: 100%;
  padding: 16px 20px;
  border: 2px solid ${colors.border};
  border-radius: 12px;
  font-size: 16px;
  transition: all 0.3s ease;
  background: white;
  font-weight: 500;
  
  &:focus {
    outline: none;
    border-color: ${colors.primary};
    box-shadow: 0 0 0 3px rgba(66, 99, 235, 0.1);
    transform: translateY(-2px);
  }
  
  &::placeholder {
    color: ${colors.secondary};
    font-weight: 400;
  }
`;

const Select = styled.select`
  width: 100%;
  padding: 16px 20px;
  border: 2px solid ${colors.border};
  border-radius: 12px;
  font-size: 16px;
  background: white;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  
  &:focus {
    outline: none;
    border-color: ${colors.primary};
    box-shadow: 0 0 0 3px rgba(66, 99, 235, 0.1);
    transform: translateY(-2px);
  }
`;

const Textarea = styled.textarea`
  width: 100%;
  padding: 20px;
  border: 2px solid ${colors.border};
  border-radius: 12px;
  min-height: 400px;
  font-size: 16px;
  font-family: inherit;
  line-height: 1.6;
  transition: all 0.3s ease;
  background: white;
  resize: vertical;
  
  &:focus {
    outline: none;
    border-color: ${colors.primary};
    box-shadow: 0 0 0 3px rgba(66, 99, 235, 0.1);
  }
  
  &::placeholder {
    color: ${colors.secondary};
  }
`;

const WritingTools = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
  padding: 12px 16px;
  background: ${colors.light};
  border-radius: 8px;
  border: 1px solid ${colors.border};
  flex-wrap: wrap;
`;

const ToolButton = styled.button`
  padding: 6px 12px;
  border: none;
  border-radius: 6px;
  background: white;
  color: ${colors.secondary};
  cursor: pointer;
  font-size: 12px;
  font-weight: 500;
  transition: all 0.2s ease;
  border: 1px solid ${colors.border};
  
  &:hover {
    background: ${colors.primary};
    color: white;
    border-color: ${colors.primary};
  }
`;

const MediaToolButton = styled(ToolButton)`
  display: flex;
  align-items: center;
  gap: 4px;
  background: ${colors.accent};
  color: white;
  border-color: ${colors.accent};
  
  &:hover {
    background: #fd7e14;
    border-color: #fd7e14;
  }
`;

const CharCount = styled.div`
  margin-left: auto;
  color: ${colors.secondary};
  font-size: 12px;
  padding: 4px 8px;
  background: white;
  border-radius: 4px;
  border: 1px solid ${colors.border};
`;

const PreviewMode = styled.div`
  margin-top: 16px;
  padding: 20px;
  background: white;
  border: 2px dashed ${colors.border};
  border-radius: 12px;
  min-height: 200px;
`;

const PreviewHeader = styled.div`
  display: flex;
  justify-content: between;
  align-items: center;
  margin-bottom: 16px;
  padding-bottom: 12px;
  border-bottom: 1px solid ${colors.border};
`;

const PreviewTitle = styled.h4`
  margin: 0;
  color: ${colors.primary};
  font-size: 14px;
  font-weight: 600;
`;

const HelpText = styled.div`
  color: ${colors.secondary};
  font-size: 12px;
  margin-top: 8px;
  line-height: 1.4;
`;

const ButtonGroup = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 40px;
  gap: 16px;
  flex-wrap: wrap;
`;

const Button = styled.button`
  padding: 14px 28px;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  font-size: 16px;
  font-weight: 600;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 8px;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }
`;

const SubmitButton = styled(Button)`
  background: ${colors.gradient};
  color: white;
  
  &:hover:not(:disabled) {
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }
  
  &:before {
    content: '${props => props.$isEdit ? 'üíæ' : 'üìù'}';
    font-size: 14px;
  }
`;

const CancelButton = styled(Button)`
  background: ${colors.light};
  color: ${colors.secondary};
  border: 2px solid ${colors.border};
  
  &:hover {
    background: ${colors.border};
    color: ${colors.dark};
  }
  
  &:before {
    content: '‚ùå';
    font-size: 14px;
  }
`;

const PreviewButton = styled(Button)`
  background: ${colors.accent};
  color: white;
  
  &:hover:not(:disabled) {
    background: #fd7e14;
    box-shadow: 0 6px 20px rgba(245, 159, 0, 0.4);
  }
  
  &:before {
    content: 'üëÅÔ∏è';
    font-size: 14px;
  }
`;

const LoadingSpinner = styled.div`
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 8px;
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;

const LoadingCard = styled.div`
  background: ${colors.cardBg};
  border-radius: 20px;
  padding: 40px;
  text-align: center;
  box-shadow: 0 10px 40px ${colors.shadow};
  border: 1px solid ${colors.border};
  
  animation: pulse 1.5s ease-in-out infinite;
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }
`;

const AttachmentSection = styled.div`
  margin: 24px 0;
`;

const ErrorMessage = styled.div`
  color: ${colors.danger};
  font-size: 14px;
  margin: 16px 0;
  padding: 12px;
  background: rgba(255, 107, 107, 0.1);
  border-radius: 8px;
  border: 1px solid rgba(255, 107, 107, 0.2);
`;

const SuccessMessage = styled.div`
  color: ${colors.success};
  font-size: 14px;
  margin: 16px 0;
  padding: 12px;
  background: rgba(81, 207, 102, 0.1);
  border-radius: 8px;
  border: 1px solid rgba(81, 207, 102, 0.2);
`;

const FileInputHidden = styled.input`
  display: none;
`;

const MediaPreviewContainer = styled.div`
  margin-top: 16px;
  padding: 16px;
  background: ${colors.light};
  border-radius: 8px;
  border: 1px solid ${colors.border};
`;

const MediaPreviewTitle = styled.h4`
  font-size: 14px;
  margin: 0 0 16px 0;
  color: ${colors.dark};
`;

const MediaPreviewGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: 12px;
`;

const MediaItem = styled.div`
  border: 1px solid ${colors.border};
  border-radius: 8px;
  overflow: hidden;
  position: relative;
  cursor: pointer;
  transition: all 0.2s ease;
  background: white;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px ${colors.shadow};
  }
`;

const MediaItemImage = styled.img`
  width: 100%;
  height: 100px;
  object-fit: cover;
`;

const MediaItemTitle = styled.div`
  font-size: 11px;
  padding: 6px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  text-align: center;
  color: ${colors.secondary};
`;

const MediaUploadProgress = styled.div`
  height: 4px;
  background: ${colors.border};
  width: 100%;
  overflow: hidden;
  margin-top: 8px;
`;

const MediaUploadProgressBar = styled.div`
  height: 100%;
  background: ${colors.primary};
  width: ${props => props.$progress}%;
  transition: width 0.3s ease;
`;

const MediaTypeGroup = styled.div`
  display: flex;
  gap: 12px;
  margin-bottom: 20px;
`;

const MediaTypeTab = styled.button`
  padding: 8px 16px;
  border: none;
  border-radius: 30px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  background: ${props => props.$active ? colors.primary : colors.light};
  color: ${props => props.$active ? 'white' : colors.secondary};
  
  &:hover {
    background: ${props => props.$active ? colors.primary : colors.border};
  }
`;

const MediaInsertModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 20px;
  animation: fadeIn 0.3s ease;
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
`;

const MediaInsertModalContent = styled.div`
  background: white;
  border-radius: 16px;
  max-width: 800px;
  width: 100%;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
`;

const MediaInsertModalHeader = styled.div`
  padding: 16px 24px;
  border-bottom: 1px solid ${colors.border};
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const MediaInsertModalTitle = styled.h3`
  margin: 0;
  font-size: 18px;
  color: ${colors.dark};
`;

const MediaInsertModalClose = styled.button`
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  color: ${colors.secondary};
  
  &:hover {
    color: ${colors.danger};
  }
`;

const MediaInsertModalBody = styled.div`
  padding: 24px;
`;

const MediaInsertFooter = styled.div`
  padding: 16px 24px;
  border-top: 1px solid ${colors.border};
  display: flex;
  justify-content: flex-end;
  gap: 12px;
`;

const FileDropZone = styled.div`
  border: 2px dashed ${colors.border};
  border-radius: 8px;
  padding: 40px 20px;
  text-align: center;
  margin-bottom: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
  background: ${props => props.$isDragging ? `rgba(66, 99, 235, 0.05)` : 'transparent'};
  
  &:hover {
    border-color: ${colors.primary};
    background: rgba(66, 99, 235, 0.02);
  }
`;

const FileDropIcon = styled.div`
  font-size: 48px;
  margin-bottom: 16px;
  color: ${colors.secondary};
`;

const FileDropText = styled.div`
  color: ${colors.secondary};
  margin-bottom: 16px;
`;

const BoardForm = () => {
  const { id, categoryId } = useParams();
  const navigate = useNavigate();
  const isEdit = !!id;
  const currentUser = getCurrentUser();
  
  const [formData, setFormData] = useState({
    title: '',
    content: '',
    categoryId: categoryId || ''
  });
  
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(isEdit);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [showPreview, setShowPreview] = useState(false);
  
  // ÌååÏùº ÏóÖÎ°úÎìú Í¥ÄÎ†® ÏÉÅÌÉú
  const [files, setFiles] = useState([]);
  const [existingAttachments, setExistingAttachments] = useState([]);
  const [attachmentsToDelete, setAttachmentsToDelete] = useState([]);
  
  // Ïù¥ÎØ∏ÏßÄ ÏÇΩÏûÖ Í¥ÄÎ†® ÏÉÅÌÉú
  const [showMediaModal, setShowMediaModal] = useState(false);
  const [uploadingMedia, setUploadingMedia] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadedMedia, setUploadedMedia] = useState([]);
  const [selectedMediaType, setSelectedMediaType] = useState('image');
  const [isDragging, setIsDragging] = useState(false);
  
  // Refs
  const fileInputRef = useRef(null);
  const mediaFileInputRef = useRef(null);
  const textareaRef = useRef(null);

  useEffect(() => {
    const loadData = async () => {
      try {
        // Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
        const categoriesData = await fetchCategories();
        setCategories(categoriesData);
        
        if (isEdit) {
          // ÏàòÏ†ï Î™®ÎìúÏùº Í≤ΩÏö∞ Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
          const postData = await fetchPost(id);
          setFormData({
            title: postData.title,
            content: postData.content,
            categoryId: postData.categoryId || ''
          });
          
          // Í∏∞Ï°¥ Ï≤®Î∂ÄÌååÏùº ÏÑ§Ï†ï
          if (postData.attachments && postData.attachments.length > 0) {
            setExistingAttachments(postData.attachments);
            
            // Ïù¥ÎØ∏ ÎßàÌÅ¨Îã§Ïö¥Ïóê ÏÇΩÏûÖÎêú Ïù¥ÎØ∏ÏßÄ URLÎì§ÏùÑ uploadedMediaÏóê Ï∂îÍ∞Ä
            const imageUrls = extractImageUrlsFromMarkdown(postData.content);
            const mediaItems = postData.attachments
              .filter(a => a.fileCategory === 'IMAGE' || a.fileCategory === 'VIDEO')
              .map(a => ({
                id: a.id,
                url: a.fileUrl,
                name: a.originalFileName,
                type: a.fileCategory.toLowerCase()
              }));
            
            setUploadedMedia(mediaItems);
          }
        } else {
          // ÏÉà Í∏Ä ÏûëÏÑ± Ïãú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï
          setFormData(prev => ({
            ...prev,
            categoryId: categoryId || ''
          }));
        }
        
        setLoading(false);
      } catch (err) {
        setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        setLoading(false);
      }
    };

    loadData();
  }, [id, isEdit, categoryId]);

  // ÎßàÌÅ¨Îã§Ïö¥ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ URL Ï∂îÏ∂úÌïòÎäî Ìï®Ïàò
  const extractImageUrlsFromMarkdown = (markdown) => {
    const regex = /!\[.*?\]\((.*?)\)/g;
    const urls = [];
    let match;
    
    while ((match = regex.exec(markdown)) !== null) {
      urls.push(match[1]);
    }
    
    return urls;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    // Í∞ÑÎã®Ìïú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (!formData.title.trim()) {
      setError('Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    if (!formData.categoryId) {
      setError('Í≤åÏãúÌåêÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    if (!formData.content.trim()) {
      setError('ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ÏûëÏÑ±ÏûêÎäî ÏÑúÎ≤ÑÏóêÏÑú ÏûêÎèôÏúºÎ°ú ÏÑ§Ï†ïÎê® (ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÎãâÎÑ§ÏûÑ)
    setSubmitting(true);

    try {
      if (isEdit) {
        // ÏàòÏ†ï Î™®Îìú: Í≤åÏãúÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏ (Ï≤®Î∂ÄÌååÏùº Ìè¨Ìï®)
        await updatePostWithFiles(id, formData, files, attachmentsToDelete);
        alert('Í≤åÏãúÍ∏ÄÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
      } else {
        // ÏûëÏÑ± Î™®Îìú: ÏÉà Í≤åÏãúÍ∏Ä ÏÉùÏÑ± (Ï≤®Î∂ÄÌååÏùº Ìè¨Ìï®)
        await createPostWithFiles(formData, files);
        alert('Í≤åÏãúÍ∏ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.');
      }
      navigate(formData.categoryId ? `/category/${formData.categoryId}` : '/');
    } catch (err) {
      setError(isEdit ? 'Í≤åÏãúÍ∏Ä ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' : 'Í≤åÏãúÍ∏Ä Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setSubmitting(false);
    }
  };

  const handleCancel = () => {
    if (window.confirm('ÏûëÏÑ± Ï§ëÏù∏ ÎÇ¥Ïö©Ïù¥ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏäµÎãàÎã§. Ï†ïÎßê Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      navigate(isEdit ? `/post/${id}` : '/');
    }
  };

  const insertText = (before, after = '') => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = formData.content.substring(start, end);
    
    const newText = formData.content.substring(0, start) + 
                   before + selectedText + after + 
                   formData.content.substring(end);
    
    setFormData(prev => ({ ...prev, content: newText }));
    
    // Ïª§ÏÑú ÏúÑÏπò Î≥µÏõê
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start + before.length, end + before.length);
    }, 0);
  };

  // Í∂åÌïú ÌëúÏãú Ìï®Ïàò
  const getRoleDisplayName = (role) => {
    switch (role) {
      case 'ROLE_MANAGER': return 'Îß§ÎãàÏ†Ä';
      case 'ROLE_ADMIN': return 'Í¥ÄÎ¶¨Ïûê';
      case 'ROLE_MODERATOR': return 'Í¥ÄÎ¶¨ÏûêÌöåÏõê';
      case 'ROLE_USER': return 'ÏùºÎ∞òÌöåÏõê';
      default: return 'ÌöåÏõê';
    }
  };

  // ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùò Ï≤´ Í∏ÄÏûê Ï∂îÏ∂ú
  const getUserInitial = (user) => {
    return user?.username?.charAt(0).toUpperCase() || 'U';
  };
  
  // Í∏∞Ï°¥ Ï≤®Î∂ÄÌååÏùº ÏÇ≠Ï†ú Ï≤òÎ¶¨
  const handleRemoveExistingAttachment = (attachmentId) => {
    if (!attachmentId) return;
    
    // ÏÇ≠Ï†úÌï† Ï≤®Î∂ÄÌååÏùº ID Î™©Î°ùÏóê Ï∂îÍ∞Ä
    setAttachmentsToDelete(prev => [...prev, attachmentId]);
    
    // ÌôîÎ©¥ÏóêÏÑú Ï†úÍ±∞
    setExistingAttachments(prev => prev.filter(a => a.id !== attachmentId));
    
    // uploadedMediaÏóêÏÑúÎèÑ Ï†úÍ±∞
    setUploadedMedia(prev => prev.filter(media => media.id !== attachmentId));
  };
  
  // ÎØ∏ÎîîÏñ¥ Î™®Îã¨ Ïó¥Í∏∞
  const openMediaModal = () => {
    setShowMediaModal(true);
  };
  
  // ÎØ∏ÎîîÏñ¥ Î™®Îã¨ Îã´Í∏∞
  const closeMediaModal = () => {
    setShowMediaModal(false);
  };
  
  // ÌååÏùº ÏûÖÎ†• Ï∞Ω Ïó¥Í∏∞
  const triggerFileInput = () => {
    mediaFileInputRef.current.click();
  };

// ÎØ∏ÎîîÏñ¥ ÌååÏùº ÏóÖÎ°úÎìú Ï≤òÎ¶¨ Ìï®Ïàò
const handleMediaFileChange = async (e) => {
  const files = Array.from(e.target.files);
  if (files.length === 0) return;
  
  // ÌååÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
  const supportedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
  const supportedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg'];
  
  const validFiles = files.filter(file => {
    if (selectedMediaType === 'image' && !supportedImageTypes.includes(file.type)) {
      alert(`ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄ ÌòïÏãùÏûÖÎãàÎã§: ${file.type}`);
      return false;
    }
    
    if (selectedMediaType === 'video' && !supportedVideoTypes.includes(file.type)) {
      alert(`ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÎèôÏòÅÏÉÅ ÌòïÏãùÏûÖÎãàÎã§: ${file.type}`);
      return false;
    }
    
    if (file.size > 10 * 1024 * 1024) { // 10MB Ï†úÌïú
      alert(`ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§: ${file.name}`);
      return false;
    }
    
    return true;
  });
  
  if (validFiles.length === 0) return;
  
  // ÌååÏùº ÏóÖÎ°úÎìú ÏßÑÌñâ
  setUploadingMedia(true);
  setUploadProgress(0);
  
  try {
    const progressStep = 100 / validFiles.length;
    const newMedia = [];
    
    for (let i = 0; i < validFiles.length; i++) {
      const file = validFiles[i];
      
      try {
        // ÌååÏùº ÏóÖÎ°úÎìú API Ìò∏Ï∂ú
        const response = await uploadFile(file);
        
        // Î∞±ÏóîÎìú ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏàòÏ†ï
        if (response && response.fileName) {
          const isImage = supportedImageTypes.includes(file.type);
          const isVideo = supportedVideoTypes.includes(file.type);
          
          // Ïò¨Î∞îÎ•∏ URL Í≤ΩÎ°ú ÏÉùÏÑ±
          const fileUrl = `/api/files/temp/${response.fileName}`;
          
          newMedia.push({
            id: Date.now() + i, // ÏûÑÏãú ID ÏÉùÏÑ±
            url: fileUrl,
            name: file.name,
            type: isImage ? 'image' : 'video',
            originalResponse: response // ÎîîÎ≤ÑÍπÖÏö©
          });
        }
        
        // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
        setUploadProgress((i + 1) * progressStep);
      } catch (fileError) {
        console.error(`ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå®: ${file.name}`, fileError);
        alert(`ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå®: ${file.name}`);
      }
    }
    
    // ÏóÖÎ°úÎìúÎêú ÎØ∏ÎîîÏñ¥ Î™©Î°ùÏóê Ï∂îÍ∞Ä
    setUploadedMedia(prev => [...prev, ...newMedia]);
    
    // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú
    if (newMedia.length > 0) {
      setSuccess(`${newMedia.length}Í∞úÏùò ${selectedMediaType === 'image' ? 'Ïù¥ÎØ∏ÏßÄ' : 'ÎèôÏòÅÏÉÅ'}Í∞Ä ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.`);
    }
    
  } catch (err) {
    console.error('ÎØ∏ÎîîÏñ¥ ÏóÖÎ°úÎìú Ïò§Î•ò:', err);
    setError('ÎØ∏ÎîîÏñ¥ ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
  } finally {
    setUploadingMedia(false);
    e.target.value = ''; // ÌååÏùº ÏûÖÎ†• Ï¥àÍ∏∞Ìôî
  }
};
  
  // ÎØ∏ÎîîÏñ¥ ÏÇΩÏûÖ
  const insertMedia = (media) => {
    let markdown = '';
    
    if (media.type === 'image') {
      markdown = `![${media.name}](${media.url})`;
    } else if (media.type === 'video') {
      markdown = `<video controls width="100%"><source src="${media.url}" type="video/mp4"></video>`;
    }
    
    if (markdown) {
      insertText(markdown);
      closeMediaModal();
    }
  };
  
  // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleDragEnter = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };
  
  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };
  
  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };
  
  const handleDrop = async (e) => {
  e.preventDefault();
  e.stopPropagation();
  setIsDragging(false);
  
  const files = Array.from(e.dataTransfer.files);
  if (files.length === 0) return;
  
  // ÌååÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î∞è ÏóÖÎ°úÎìú Ï≤òÎ¶¨
  const supportedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
  const supportedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg'];
  
  const validFiles = files.filter(file => {
    const isImage = supportedImageTypes.includes(file.type);
    const isVideo = supportedVideoTypes.includes(file.type);
    
    if (!isImage && !isVideo) {
      alert(`ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§: ${file.type}`);
      return false;
    }
    
    if (file.size > 10 * 1024 * 1024) { // 10MB Ï†úÌïú
      alert(`ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§: ${file.name}`);
      return false;
    }
    
    return true;
  });
  
  if (validFiles.length === 0) return;
  
  // ÌååÏùº ÏóÖÎ°úÎìú ÏßÑÌñâ
  setUploadingMedia(true);
  setUploadProgress(0);
  
  try {
    const progressStep = 100 / validFiles.length;
    const newMedia = [];
    
    for (let i = 0; i < validFiles.length; i++) {
      const file = validFiles[i];
      
      try {
        // ÌååÏùº ÏóÖÎ°úÎìú API Ìò∏Ï∂ú
        const response = await uploadFile(file);
        
        // ÏóÖÎ°úÎìúÎêú ÎØ∏ÎîîÏñ¥ Ï†ïÎ≥¥ Ï†ÄÏû•
        if (response && response.fileName) {
          const isImage = supportedImageTypes.includes(file.type);
          
          // Ïò¨Î∞îÎ•∏ URL Í≤ΩÎ°ú ÏÉùÏÑ±
          const fileUrl = `/api/files/temp/${response.fileName}`;
          
          newMedia.push({
            id: Date.now() + i,
            url: fileUrl,
            name: file.name,
            type: isImage ? 'image' : 'video'
          });
        }
        
        // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
        setUploadProgress((i + 1) * progressStep);
      } catch (fileError) {
        console.error(`ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå®: ${file.name}`, fileError);
      }
    }
    
    // ÏóÖÎ°úÎìúÎêú ÎØ∏ÎîîÏñ¥ Î™©Î°ùÏóê Ï∂îÍ∞Ä
    setUploadedMedia(prev => [...prev, ...newMedia]);
    
    // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú
    if (newMedia.length > 0) {
      setSuccess(`${newMedia.length}Í∞úÏùò ÌååÏùºÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.`);
    }
    
  } catch (err) {
    console.error('ÎØ∏ÎîîÏñ¥ ÏóÖÎ°úÎìú Ïò§Î•ò:', err);
    setError('ÎØ∏ÎîîÏñ¥ ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
  } finally {
    setUploadingMedia(false);
  }
};

  if (loading) {
    return (
      <FormContainer>
        <LoadingCard>
          <LoadingSpinner style={{ margin: '0 auto 16px auto' }} />
          <div>Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
        </LoadingCard>
      </FormContainer>
    );
  }

  return (
    <FormContainer>
      <FormCard>
        <FormHeader>
          <HeaderContent>
            <TitleSection>
              <PageTitle $isEdit={isEdit}>
                {isEdit ? 'Í≤åÏãúÍ∏Ä ÏàòÏ†ï' : 'ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ±'}
              </PageTitle>
              <PageSubtitle>
                {isEdit 
                  ? 'Í≤åÏãúÍ∏Ä ÎÇ¥Ïö©ÏùÑ ÏàòÏ†ïÌïòÍ≥† Ï†ÄÏû•Ìï¥Ï£ºÏÑ∏Ïöî.' 
                  : 'Ïª§ÎÆ§ÎãàÌã∞ Í∑úÏπôÏùÑ Ï§ÄÏàòÌïòÏó¨ Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.'
                }
              </PageSubtitle>
            </TitleSection>
            
            <AuthorCard>
              <AuthorAvatar>{getUserInitial(currentUser)}</AuthorAvatar>
              <AuthorInfo>
                <AuthorName>
                  {currentUser?.nickname || currentUser?.name || currentUser?.username}
                </AuthorName>
                <AuthorRole $role={currentUser?.role}>
                  {getRoleDisplayName(currentUser?.role)}
                </AuthorRole>
              </AuthorInfo>
            </AuthorCard>
          </HeaderContent>
        </FormHeader>
        
        <Form onSubmit={handleSubmit}>
          <FormSection>
            <SectionTitle $icon="üìã">Í∏∞Î≥∏ Ï†ïÎ≥¥</SectionTitle>
            <FormRow $columns="2fr 1fr">
              <FormGroup>
                <Label htmlFor="title">
                  Ï†úÎ™© <Required>*</Required>
                </Label>
                <Input
                  type="text"
                  id="title"
                  name="title"
                  value={formData.title}
                  onChange={handleChange}
                  placeholder="Í≤åÏãúÍ∏Ä Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  required
                />
                <HelpText>
                  Î™ÖÌôïÌïòÍ≥† Í∞ÑÍ≤∞Ìïú Ï†úÎ™©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. (ÏµúÎåÄ 100Ïûê)
                </HelpText>
              </FormGroup>
              
              <FormGroup>
                <Label htmlFor="categoryId">
                  Í≤åÏãúÌåê <Required>*</Required>
                </Label>
                <Select
                  id="categoryId"
                  name="categoryId"
                  value={formData.categoryId}
                  onChange={handleChange}
                  required
                >
                  <option value="">Í≤åÏãúÌåêÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                  {categories.map(category => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </Select>
                <HelpText>
                  Ï†ÅÏ†àÌïú Í≤åÏãúÌåêÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.
                </HelpText>
              </FormGroup>
            </FormRow>
          </FormSection>
          
          <FormSection>
            <SectionTitle $icon="‚úçÔ∏è">ÎÇ¥Ïö© ÏûëÏÑ±</SectionTitle>
            
            <WritingTools>
              <ToolButton type="button" onClick={() => insertText('**', '**')}>
                ÍµµÍ≤å
              </ToolButton>
              <ToolButton type="button" onClick={() => insertText('*', '*')}>
                Í∏∞Ïö∏ÏûÑ
              </ToolButton>
              <ToolButton type="button" onClick={() => insertText('`', '`')}>
                ÏΩîÎìú
              </ToolButton>
              <ToolButton type="button" onClick={() => insertText('> ')}>
                Ïù∏Ïö©
              </ToolButton>
              <ToolButton type="button" onClick={() => insertText('- ')}>
                Î™©Î°ù
              </ToolButton>
              <ToolButton type="button" onClick={() => insertText('\n---\n')}>
                Íµ¨Î∂ÑÏÑ†
              </ToolButton>
              
              {/* ÎØ∏ÎîîÏñ¥ ÏÇΩÏûÖ Î≤ÑÌäº Ï∂îÍ∞Ä */}
              <MediaToolButton type="button" onClick={openMediaModal}>
                üì∑ Ïù¥ÎØ∏ÏßÄ/ÎèôÏòÅÏÉÅ ÏÇΩÏûÖ
              </MediaToolButton>
              
              <CharCount>
                {formData.content.length} / 10,000Ïûê
              </CharCount>
            </WritingTools>
            
            <Textarea
              ref={textareaRef}
              id="content"
              name="content"
              value={formData.content}
              onChange={handleChange}
              placeholder="Í≤åÏãúÍ∏Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî...

üí° ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï ÏòàÏãú:
**ÍµµÏùÄ ÌÖçÏä§Ìä∏**, *Í∏∞Ïö∏ÏûÑ ÌÖçÏä§Ìä∏*
> Ïù∏Ïö©Î¨∏ÏûÖÎãàÎã§
- Î™©Î°ù Ìï≠Î™©
`Ïù∏ÎùºÏù∏ ÏΩîÎìú`

```
ÏΩîÎìú Î∏îÎ°ù
Ïó¨Îü¨ Ï§ÑÏùò ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï† Ïàò ÏûàÏäµÎãàÎã§
```

# Ï†úÎ™©
## Î∂ÄÏ†úÎ™©

[ÎßÅÌÅ¨ ÌÖçÏä§Ìä∏](https://example.com)

Ïù¥ÎØ∏ÏßÄÎäî ÏÉÅÎã®Ïùò 'Ïù¥ÎØ∏ÏßÄ/ÎèôÏòÅÏÉÅ ÏÇΩÏûÖ' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò
ÏóêÎîîÌÑ∞Ïóê ÏßÅÏ†ë ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§."
              maxLength={10000}
            />
            
            <HelpText>
              ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ïÏùÑ ÏßÄÏõêÌï©ÎãàÎã§:<br/>
              ‚Ä¢ **ÍµµÍ≤å**, *Í∏∞Ïö∏ÏûÑ*, `ÏΩîÎìú`, Ïù∏Ïö©Î¨∏<br/>
              ‚Ä¢ # Ï†úÎ™©, - Î™©Î°ù, [ÎßÅÌÅ¨](URL), --- Íµ¨Î∂ÑÏÑ†<br/>
              ‚Ä¢ Ïù¥ÎØ∏ÏßÄÏôÄ ÎèôÏòÅÏÉÅÏùÄ ÏÉÅÎã®Ïùò 'Ïù¥ÎØ∏ÏßÄ/ÎèôÏòÅÏÉÅ ÏÇΩÏûÖ' Î≤ÑÌäºÏùÑ ÌÜµÌï¥ Ï≤®Î∂ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </HelpText>
            
            {/* ÏÑ±Í≥µ/Ïò§Î•ò Î©îÏãúÏßÄ */}
            {success && <SuccessMessage>{success}</SuccessMessage>}
            {error && <ErrorMessage>{error}</ErrorMessage>}
            
            {showPreview && (
              <PreviewMode>
                <PreviewHeader>
                  <PreviewTitle>ÎØ∏Î¶¨Î≥¥Í∏∞</PreviewTitle>
                </PreviewHeader>
                {formData.content ? (
                  <MarkdownRenderer content={formData.content} />
                ) : (
                  <div style={{ color: colors.secondary, fontStyle: 'italic' }}>
                    ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÎ©¥ Ïó¨Í∏∞Ïóê ÎØ∏Î¶¨Î≥¥Í∏∞Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.
                  </div>
                )}
              </PreviewMode>
            )}
          </FormSection>
          
          <AttachmentSection>
            <SectionTitle $icon="üìé">Ï≤®Î∂ÄÌååÏùº</SectionTitle>
            <HelpText>
              Ïù¥ÎØ∏ÏßÄÎÇò ÎèôÏòÅÏÉÅÏùÄ Î≥∏Î¨∏ Ï§ëÍ∞ÑÏóê ÏÇΩÏûÖÌïòÎäî Í≤ÉÏùÑ Í∂åÏû•Ìï©ÎãàÎã§. Ïó¨Í∏∞ÏóêÎäî Îã§Ïö¥Î°úÎìúÏö© Ï≤®Î∂ÄÌååÏùºÎßå Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.
            </HelpText>
            
            {/* ÌååÏùº ÏóÖÎ°úÎçî Ïª¥Ìè¨ÎÑåÌä∏ */}
            <FileUploader 
              files={files} 
              setFiles={setFiles} 
              maxFiles={5} 
              maxFileSize={10 * 1024 * 1024} // 10MB
              acceptedTypes="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/zip,application/x-zip-compressed"
            />
          </AttachmentSection>
          
          <ButtonGroup>
            <CancelButton type="button" onClick={handleCancel}>
              Ï∑®ÏÜåÌïòÍ∏∞
            </CancelButton>
            
            <div style={{ display: 'flex', gap: '12px' }}>
              <PreviewButton 
                type="button" 
                onClick={() => setShowPreview(!showPreview)}
              >
                {showPreview ? 'Ìé∏Ïßë Î™®Îìú' : 'ÎØ∏Î¶¨Î≥¥Í∏∞'}
              </PreviewButton>
              
              <SubmitButton type="submit" disabled={submitting} $isEdit={isEdit}>
                {submitting ? (
                  <>
                    <LoadingSpinner />
                    {isEdit ? 'ÏàòÏ†ï Ï§ë...' : 'Îì±Î°ù Ï§ë...'}
                  </>
                ) : (
                  isEdit ? 'ÏàòÏ†ïÌïòÍ∏∞' : 'Îì±Î°ùÌïòÍ∏∞'
                )}
              </SubmitButton>
            </div>
          </ButtonGroup>
        </Form>
      </FormCard>
      
      {/* ÎØ∏ÎîîÏñ¥ ÏÇΩÏûÖ Î™®Îã¨ */}
      {showMediaModal && (
        <MediaInsertModal>
          <MediaInsertModalContent>
            <MediaInsertModalHeader>
              <MediaInsertModalTitle>ÎØ∏ÎîîÏñ¥ ÏÇΩÏûÖ</MediaInsertModalTitle>
              <MediaInsertModalClose onClick={closeMediaModal}>√ó</MediaInsertModalClose>
            </MediaInsertModalHeader>
            
            <MediaInsertModalBody>
              {/* ÎØ∏ÎîîÏñ¥ Ïú†Ìòï ÏÑ†ÌÉù */}
              <MediaTypeGroup>
                <MediaTypeTab 
                  $active={selectedMediaType === 'image'} 
                  onClick={() => setSelectedMediaType('image')}
                >
                  üì∑ Ïù¥ÎØ∏ÏßÄ
                </MediaTypeTab>
                <MediaTypeTab 
                  $active={selectedMediaType === 'video'} 
                  onClick={() => setSelectedMediaType('video')}
                >
                  üé¨ ÎèôÏòÅÏÉÅ
                </MediaTypeTab>
              </MediaTypeGroup>
              
              {/* ÌååÏùº ÎìúÎ°≠Ï°¥ */}
              <FileDropZone 
                onClick={triggerFileInput}
                onDragEnter={handleDragEnter}
                onDragLeave={handleDragLeave}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                $isDragging={isDragging}
              >
                <FileDropIcon>üì§</FileDropIcon>
                <FileDropText>
                  {selectedMediaType === 'image' 
                    ? 'ÌÅ¥Î¶≠ÌïòÏó¨ Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ†ÌÉùÌïòÍ±∞ÎÇò Ïó¨Í∏∞Ïóê Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ ÎÅåÏñ¥Îã§ ÎÜìÏúºÏÑ∏Ïöî.'
                    : 'ÌÅ¥Î¶≠ÌïòÏó¨ ÎèôÏòÅÏÉÅÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò Ïó¨Í∏∞Ïóê ÎèôÏòÅÏÉÅ ÌååÏùºÏùÑ ÎÅåÏñ¥Îã§ ÎÜìÏúºÏÑ∏Ïöî.'}
                </FileDropText>
                <Button>
                  {selectedMediaType === 'image' ? 'Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù' : 'ÎèôÏòÅÏÉÅ ÏÑ†ÌÉù'}
                </Button>
                <FileInputHidden
                  ref={mediaFileInputRef}
                  type="file"
                  accept={selectedMediaType === 'image' 
                    ? "image/jpeg,image/png,image/gif,image/webp" 
                    : "video/mp4,video/webm,video/ogg"}
                  onChange={handleMediaFileChange}
                  multiple
                />
              </FileDropZone>
              
              {/* ÏóÖÎ°úÎìú ÏßÑÌñâ ÏÉÅÌÉú */}
              {uploadingMedia && (
                <div style={{ marginBottom: '20px' }}>
                  <div style={{ marginBottom: '8px' }}>
                    ÏóÖÎ°úÎìú Ï§ë... {Math.round(uploadProgress)}%
                  </div>
                  <MediaUploadProgress>
                    <MediaUploadProgressBar $progress={uploadProgress} />
                  </MediaUploadProgress>
                </div>
              )}
              
              {/* ÏóÖÎ°úÎìúÎêú ÎØ∏ÎîîÏñ¥ Î™©Î°ù */}
              {uploadedMedia.length > 0 && (
                <MediaPreviewContainer>
                  <MediaPreviewTitle>
                    {selectedMediaType === 'image' 
                      ? 'Ïù¥ÎØ∏ÏßÄ Î™©Î°ù' 
                      : 'ÎèôÏòÅÏÉÅ Î™©Î°ù'}
                  </MediaPreviewTitle>
                  <MediaPreviewGrid>
                    {uploadedMedia
                      .filter(m => m.type === selectedMediaType)
                      .map(media => (
                        <MediaItem key={media.id} onClick={() => insertMedia(media)}>
                          {media.type === 'image' ? (
                            <MediaItemImage 
                              src={`http://localhost:5159${media.url}`} 
                              alt={media.name} 
                              onError={(e) => {
                                console.error('Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®:', media.url);
                                e.target.style.display = 'none';
                              }}
                            />
                          ) : (
                            <div style={{ height: '100px', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#f8f9fa' }}>
                              <span style={{ fontSize: '36px' }}>üé¨</span>
                            </div>
                          )}
                          <MediaItemTitle>{media.name}</MediaItemTitle>
                        </MediaItem>
                      ))}
                  </MediaPreviewGrid>
                </MediaPreviewContainer>
              )}
            </MediaInsertModalBody>
            
            <MediaInsertFooter>
              <CancelButton type="button" onClick={closeMediaModal}>
                Îã´Í∏∞
              </CancelButton>
            </MediaInsertFooter>
          </MediaInsertModalContent>
        </MediaInsertModal>
      )}
    </FormContainer>
  );
};

export default BoardForm;